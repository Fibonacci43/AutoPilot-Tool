// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric.proto

#ifndef PROTOBUF_geometric_2eproto__INCLUDED
#define PROTOBUF_geometric_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace sample {
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Lines;
class LinesDefaultTypeInternal;
extern LinesDefaultTypeInternal _Lines_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class Sample;
class SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
}  // namespace sample

namespace sample {

namespace protobuf_geometric_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_geometric_2eproto

// ===================================================================

class Point3D : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sample.Point3D) */ {
 public:
  Point3D();
  virtual ~Point3D();

  Point3D(const Point3D& from);

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Point3D& default_instance();

  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
               &_Point3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Point3D* other);

  // implements Message ----------------------------------------------

  inline Point3D* New() const PROTOBUF_FINAL { return New(NULL); }

  Point3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Point3D& from);
  void MergeFrom(const Point3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1 [default = nan];
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2 [default = nan];
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3 [default = nan];
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:sample.Point3D)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct protobuf_geometric_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Line : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sample.Line) */ {
 public:
  Line();
  virtual ~Line();

  Line(const Line& from);

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Line& default_instance();

  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Line* other);

  // implements Message ----------------------------------------------

  inline Line* New() const PROTOBUF_FINAL { return New(NULL); }

  Line* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Line* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sample.Point3D pts = 1;
  int pts_size() const;
  void clear_pts();
  static const int kPtsFieldNumber = 1;
  const ::sample::Point3D& pts(int index) const;
  ::sample::Point3D* mutable_pts(int index);
  ::sample::Point3D* add_pts();
  ::google::protobuf::RepeatedPtrField< ::sample::Point3D >*
      mutable_pts();
  const ::google::protobuf::RepeatedPtrField< ::sample::Point3D >&
      pts() const;

  // @@protoc_insertion_point(class_scope:sample.Line)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sample::Point3D > pts_;
  friend struct protobuf_geometric_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lines : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sample.Lines) */ {
 public:
  Lines();
  virtual ~Lines();

  Lines(const Lines& from);

  inline Lines& operator=(const Lines& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Lines& default_instance();

  static inline const Lines* internal_default_instance() {
    return reinterpret_cast<const Lines*>(
               &_Lines_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Lines* other);

  // implements Message ----------------------------------------------

  inline Lines* New() const PROTOBUF_FINAL { return New(NULL); }

  Lines* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Lines& from);
  void MergeFrom(const Lines& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lines* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sample.Lines)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sample : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sample.Sample) */ {
 public:
  Sample();
  virtual ~Sample();

  Sample(const Sample& from);

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Sample& default_instance();

  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Sample* other);

  // implements Message ----------------------------------------------

  inline Sample* New() const PROTOBUF_FINAL { return New(NULL); }

  Sample* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sample.Line lines = 1;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 1;
  const ::sample::Line& lines(int index) const;
  ::sample::Line* mutable_lines(int index);
  ::sample::Line* add_lines();
  ::google::protobuf::RepeatedPtrField< ::sample::Line >*
      mutable_lines();
  const ::google::protobuf::RepeatedPtrField< ::sample::Line >&
      lines() const;

  // repeated .sample.Point3D pts = 2;
  int pts_size() const;
  void clear_pts();
  static const int kPtsFieldNumber = 2;
  const ::sample::Point3D& pts(int index) const;
  ::sample::Point3D* mutable_pts(int index);
  ::sample::Point3D* add_pts();
  ::google::protobuf::RepeatedPtrField< ::sample::Point3D >*
      mutable_pts();
  const ::google::protobuf::RepeatedPtrField< ::sample::Point3D >&
      pts() const;

  // @@protoc_insertion_point(class_scope:sample.Sample)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sample::Line > lines_;
  ::google::protobuf::RepeatedPtrField< ::sample::Point3D > pts_;
  friend struct protobuf_geometric_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Point3D

// optional double x = 1 [default = nan];
inline bool Point3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point3D::clear_x() {
  x_ = ::google::protobuf::internal::NaN();
  clear_has_x();
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:sample.Point3D.x)
  return x_;
}
inline void Point3D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:sample.Point3D.x)
}

// optional double y = 2 [default = nan];
inline bool Point3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point3D::clear_y() {
  y_ = ::google::protobuf::internal::NaN();
  clear_has_y();
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:sample.Point3D.y)
  return y_;
}
inline void Point3D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:sample.Point3D.y)
}

// optional double z = 3 [default = nan];
inline bool Point3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point3D::clear_z() {
  z_ = ::google::protobuf::internal::NaN();
  clear_has_z();
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:sample.Point3D.z)
  return z_;
}
inline void Point3D::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:sample.Point3D.z)
}

// -------------------------------------------------------------------

// Line

// repeated .sample.Point3D pts = 1;
inline int Line::pts_size() const {
  return pts_.size();
}
inline void Line::clear_pts() {
  pts_.Clear();
}
inline const ::sample::Point3D& Line::pts(int index) const {
  // @@protoc_insertion_point(field_get:sample.Line.pts)
  return pts_.Get(index);
}
inline ::sample::Point3D* Line::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:sample.Line.pts)
  return pts_.Mutable(index);
}
inline ::sample::Point3D* Line::add_pts() {
  // @@protoc_insertion_point(field_add:sample.Line.pts)
  return pts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sample::Point3D >*
Line::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:sample.Line.pts)
  return &pts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sample::Point3D >&
Line::pts() const {
  // @@protoc_insertion_point(field_list:sample.Line.pts)
  return pts_;
}

// -------------------------------------------------------------------

// Lines

// -------------------------------------------------------------------

// Sample

// repeated .sample.Line lines = 1;
inline int Sample::lines_size() const {
  return lines_.size();
}
inline void Sample::clear_lines() {
  lines_.Clear();
}
inline const ::sample::Line& Sample::lines(int index) const {
  // @@protoc_insertion_point(field_get:sample.Sample.lines)
  return lines_.Get(index);
}
inline ::sample::Line* Sample::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:sample.Sample.lines)
  return lines_.Mutable(index);
}
inline ::sample::Line* Sample::add_lines() {
  // @@protoc_insertion_point(field_add:sample.Sample.lines)
  return lines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sample::Line >*
Sample::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:sample.Sample.lines)
  return &lines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sample::Line >&
Sample::lines() const {
  // @@protoc_insertion_point(field_list:sample.Sample.lines)
  return lines_;
}

// repeated .sample.Point3D pts = 2;
inline int Sample::pts_size() const {
  return pts_.size();
}
inline void Sample::clear_pts() {
  pts_.Clear();
}
inline const ::sample::Point3D& Sample::pts(int index) const {
  // @@protoc_insertion_point(field_get:sample.Sample.pts)
  return pts_.Get(index);
}
inline ::sample::Point3D* Sample::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:sample.Sample.pts)
  return pts_.Mutable(index);
}
inline ::sample::Point3D* Sample::add_pts() {
  // @@protoc_insertion_point(field_add:sample.Sample.pts)
  return pts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sample::Point3D >*
Sample::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:sample.Sample.pts)
  return &pts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sample::Point3D >&
Sample::pts() const {
  // @@protoc_insertion_point(field_list:sample.Sample.pts)
  return pts_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace sample

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometric_2eproto__INCLUDED
