// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geometric.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sample {
class Point3DDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point3D> {
} _Point3D_default_instance_;
class LineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Line> {
} _Line_default_instance_;
class LinesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lines> {
} _Lines_default_instance_;
class SampleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sample> {
} _Sample_default_instance_;

namespace protobuf_geometric_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Point3D_default_instance_.Shutdown();
  _Line_default_instance_.Shutdown();
  _Lines_default_instance_.Shutdown();
  _Sample_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Point3D_default_instance_.DefaultConstruct();
  _Line_default_instance_.DefaultConstruct();
  _Lines_default_instance_.DefaultConstruct();
  _Sample_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_geometric_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point3D::kXFieldNumber;
const int Point3D::kYFieldNumber;
const int Point3D::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point3D::Point3D()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sample.Point3D)
}
Point3D::Point3D(const Point3D& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sample.Point3D)
}

void Point3D::SharedCtor() {
  _cached_size_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
  z_ = ::google::protobuf::internal::NaN();
}

Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:sample.Point3D)
  SharedDtor();
}

void Point3D::SharedDtor() {
}

void Point3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Point3D& Point3D::default_instance() {
  protobuf_geometric_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point3D* Point3D::New(::google::protobuf::Arena* arena) const {
  Point3D* n = new Point3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:sample.Point3D)
  if (_has_bits_[0 / 32] & 7u) {
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
    z_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sample.Point3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = nan];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sample.Point3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sample.Point3D)
  return false;
#undef DO_
}

void Point3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sample.Point3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sample.Point3D)
}

size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sample.Point3D)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = nan];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3D::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Point3D*>(&from));
}

void Point3D::MergeFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sample.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sample.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {
  return true;
}

void Point3D::Swap(Point3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point3D::InternalSwap(Point3D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Point3D::GetTypeName() const {
  return "sample.Point3D";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point3D

// optional double x = 1 [default = nan];
bool Point3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point3D::clear_x() {
  x_ = ::google::protobuf::internal::NaN();
  clear_has_x();
}
double Point3D::x() const {
  // @@protoc_insertion_point(field_get:sample.Point3D.x)
  return x_;
}
void Point3D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:sample.Point3D.x)
}

// optional double y = 2 [default = nan];
bool Point3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point3D::clear_y() {
  y_ = ::google::protobuf::internal::NaN();
  clear_has_y();
}
double Point3D::y() const {
  // @@protoc_insertion_point(field_get:sample.Point3D.y)
  return y_;
}
void Point3D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:sample.Point3D.y)
}

// optional double z = 3 [default = nan];
bool Point3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point3D::clear_z() {
  z_ = ::google::protobuf::internal::NaN();
  clear_has_z();
}
double Point3D::z() const {
  // @@protoc_insertion_point(field_get:sample.Point3D.z)
  return z_;
}
void Point3D::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:sample.Point3D.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kPtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sample.Line)
}
Line::Line(const Line& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sample.Line)
}

void Line::SharedCtor() {
  _cached_size_ = 0;
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:sample.Line)
  SharedDtor();
}

void Line::SharedDtor() {
}

void Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Line& Line::default_instance() {
  protobuf_geometric_2eproto::InitDefaults();
  return *internal_default_instance();
}

Line* Line::New(::google::protobuf::Arena* arena) const {
  Line* n = new Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:sample.Line)
  pts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sample.Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sample.Point3D pts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sample.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sample.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sample.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sample.Point3D pts = 1;
  for (unsigned int i = 0, n = this->pts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->pts(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sample.Line)
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sample.Line)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sample.Point3D pts = 1;
  {
    unsigned int count = this->pts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pts(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Line::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Line*>(&from));
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sample.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sample.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  pts_.InternalSwap(&other->pts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Line::GetTypeName() const {
  return "sample.Line";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Line

// repeated .sample.Point3D pts = 1;
int Line::pts_size() const {
  return pts_.size();
}
void Line::clear_pts() {
  pts_.Clear();
}
const ::sample::Point3D& Line::pts(int index) const {
  // @@protoc_insertion_point(field_get:sample.Line.pts)
  return pts_.Get(index);
}
::sample::Point3D* Line::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:sample.Line.pts)
  return pts_.Mutable(index);
}
::sample::Point3D* Line::add_pts() {
  // @@protoc_insertion_point(field_add:sample.Line.pts)
  return pts_.Add();
}
::google::protobuf::RepeatedPtrField< ::sample::Point3D >*
Line::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:sample.Line.pts)
  return &pts_;
}
const ::google::protobuf::RepeatedPtrField< ::sample::Point3D >&
Line::pts() const {
  // @@protoc_insertion_point(field_list:sample.Line.pts)
  return pts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lines::Lines()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sample.Lines)
}
Lines::Lines(const Lines& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sample.Lines)
}

void Lines::SharedCtor() {
  _cached_size_ = 0;
}

Lines::~Lines() {
  // @@protoc_insertion_point(destructor:sample.Lines)
  SharedDtor();
}

void Lines::SharedDtor() {
}

void Lines::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lines& Lines::default_instance() {
  protobuf_geometric_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lines* Lines::New(::google::protobuf::Arena* arena) const {
  Lines* n = new Lines;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lines::Clear() {
// @@protoc_insertion_point(message_clear_start:sample.Lines)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lines::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sample.Lines)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sample.Lines)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sample.Lines)
  return false;
#undef DO_
}

void Lines::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sample.Lines)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sample.Lines)
}

size_t Lines::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sample.Lines)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lines::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lines*>(&from));
}

void Lines::MergeFrom(const Lines& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sample.Lines)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Lines::CopyFrom(const Lines& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sample.Lines)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lines::IsInitialized() const {
  return true;
}

void Lines::Swap(Lines* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lines::InternalSwap(Lines* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Lines::GetTypeName() const {
  return "sample.Lines";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lines

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sample::kLinesFieldNumber;
const int Sample::kPtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sample::Sample()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sample.Sample)
}
Sample::Sample(const Sample& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lines_(from.lines_),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sample.Sample)
}

void Sample::SharedCtor() {
  _cached_size_ = 0;
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:sample.Sample)
  SharedDtor();
}

void Sample::SharedDtor() {
}

void Sample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Sample& Sample::default_instance() {
  protobuf_geometric_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sample* Sample::New(::google::protobuf::Arena* arena) const {
  Sample* n = new Sample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:sample.Sample)
  lines_.Clear();
  pts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sample.Sample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sample.Line lines = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sample.Point3D pts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sample.Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sample.Sample)
  return false;
#undef DO_
}

void Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sample.Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sample.Line lines = 1;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->lines(i), output);
  }

  // repeated .sample.Point3D pts = 2;
  for (unsigned int i = 0, n = this->pts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->pts(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sample.Sample)
}

size_t Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sample.Sample)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sample.Line lines = 1;
  {
    unsigned int count = this->lines_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lines(i));
    }
  }

  // repeated .sample.Point3D pts = 2;
  {
    unsigned int count = this->pts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pts(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sample*>(&from));
}

void Sample::MergeFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sample.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  pts_.MergeFrom(from.pts_);
}

void Sample::CopyFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sample.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  return true;
}

void Sample::Swap(Sample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sample::InternalSwap(Sample* other) {
  lines_.InternalSwap(&other->lines_);
  pts_.InternalSwap(&other->pts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Sample::GetTypeName() const {
  return "sample.Sample";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sample

// repeated .sample.Line lines = 1;
int Sample::lines_size() const {
  return lines_.size();
}
void Sample::clear_lines() {
  lines_.Clear();
}
const ::sample::Line& Sample::lines(int index) const {
  // @@protoc_insertion_point(field_get:sample.Sample.lines)
  return lines_.Get(index);
}
::sample::Line* Sample::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:sample.Sample.lines)
  return lines_.Mutable(index);
}
::sample::Line* Sample::add_lines() {
  // @@protoc_insertion_point(field_add:sample.Sample.lines)
  return lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::sample::Line >*
Sample::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:sample.Sample.lines)
  return &lines_;
}
const ::google::protobuf::RepeatedPtrField< ::sample::Line >&
Sample::lines() const {
  // @@protoc_insertion_point(field_list:sample.Sample.lines)
  return lines_;
}

// repeated .sample.Point3D pts = 2;
int Sample::pts_size() const {
  return pts_.size();
}
void Sample::clear_pts() {
  pts_.Clear();
}
const ::sample::Point3D& Sample::pts(int index) const {
  // @@protoc_insertion_point(field_get:sample.Sample.pts)
  return pts_.Get(index);
}
::sample::Point3D* Sample::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:sample.Sample.pts)
  return pts_.Mutable(index);
}
::sample::Point3D* Sample::add_pts() {
  // @@protoc_insertion_point(field_add:sample.Sample.pts)
  return pts_.Add();
}
::google::protobuf::RepeatedPtrField< ::sample::Point3D >*
Sample::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:sample.Sample.pts)
  return &pts_;
}
const ::google::protobuf::RepeatedPtrField< ::sample::Point3D >&
Sample::pts() const {
  // @@protoc_insertion_point(field_list:sample.Sample.pts)
  return pts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sample

// @@protoc_insertion_point(global_scope)
